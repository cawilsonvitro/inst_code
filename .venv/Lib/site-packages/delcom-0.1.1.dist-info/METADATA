Metadata-Version: 2.1
Name: delcom
Version: 0.1.1
Summary: Summary
Home-page: https://delcominst.com
Author: Eric Lofstad
Keywords: delcom,serial,usb
Platform: any
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pyserial

# Delcom

Delcom.py is a Python library for interfacing with Delcom sensors via USB.

## Installation

### Step 1: Setting Up the Environment

1. Install Python 3.x:

   _If you don't have Python3 installed, download and install it from python.org._

2. Verify Python and Pip installation:

    _Open your terminal or command prompt and run:_

```sh
   python --version
   pip --version
```

3. Create a Virtual Environment (optional but recommended):

```sh
   python -m venv delcom_env
   ```
&nbsp;&nbsp;&nbsp;&nbsp;_Activate the virtual environment:_

&nbsp;&nbsp;&nbsp;&nbsp;_On Windows:_

```sh
     delcom_env\Scripts\activate
```
&nbsp;&nbsp;&nbsp;&nbsp;_On macOS/Linux:_
```sh
     source delcom_env/bin/activate
```

### Step 2: Install the Delcom Package

1. Install the Delcom Wheel File:

    _Place the delcom-0.1.0-py3-none-any.whl file in your working directory and run:_
```sh
   pip install delcom-0.1.0-py3-none-any.whl
```
## Example Scripts

1. simple-read.py:

   _This script is a basic example of how to connect to a Delcom sensor and read it's data._

2. polling.py:

   _This script is designed to continuously poll the sensor to read data at regular intervals._

3. calibrate-slope.py:

     _This script is an example of setting a sensor's onboard calibration coefficients._


## Usage

```python
from delcom import interface
from delcom import Units

# find all Delcom interface modules currently connected to PC
module_list = interface.enumerate_modules()

# create interface with first discovered Delcom device ID
mod = interface.Interface(module_list[0].device)

# tare all sensors
mod.zero_all_sensors()

# read list of sensor serial numbers connected to interface
sensors = mod.read_sensor_list()

# set units to thickness in microns given a resistivity of 200 ohm-um.
mod.set_units(Units.MICRONS, resistivity_ohm_um = 200)

# set range of all sensors to high
mod.set_all_sensors_range(hi = 1)

# set range of last sensor in list to low
mod.set_sensor_range(idx = len(sensors)-1, hi = 0)

# get current sensor readings
sensor_values = mod.read_sensors()

# set auto zero threshold for sensor 1 at 0.005 mhos/sq but keep disabled
mod.set_auto_zero(0, False, threshold = 0.005, units = Units.MHOS_PER_SQ)

# enable auto zero for sensor 1
mod.set_auto_zero(0, True)

# set offset for sensor 3 to 200 ohm-cm given a thickness of 50 microns and enable offset
mod.set_offset(2, True, offset = 200, units = Units.OHMS_CM, thickness_um = 50)

# Read ip info of interface module
ip_info = mod.read_ip_info()
```

## License

[GNU AGPLv3](https://choosealicense.com/licenses/agpl-3.0/)
